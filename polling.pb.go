// Code generated by protoc-gen-go. DO NOT EDIT.
// source: polling.proto

package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PollRequest struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollRequest) Reset()         { *m = PollRequest{} }
func (m *PollRequest) String() string { return proto.CompactTextString(m) }
func (*PollRequest) ProtoMessage()    {}
func (*PollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_polling_c25380d06902f4da, []int{0}
}
func (m *PollRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollRequest.Unmarshal(m, b)
}
func (m *PollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollRequest.Marshal(b, m, deterministic)
}
func (dst *PollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollRequest.Merge(dst, src)
}
func (m *PollRequest) XXX_Size() int {
	return xxx_messageInfo_PollRequest.Size(m)
}
func (m *PollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollRequest proto.InternalMessageInfo

func (m *PollRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type PollResponse struct {
	Distance             uint64   `protobuf:"varint,1,opt,name=distance,proto3" json:"distance,omitempty"`
	ClaimableTokens      uint64   `protobuf:"varint,2,opt,name=claimableTokens,proto3" json:"claimableTokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollResponse) Reset()         { *m = PollResponse{} }
func (m *PollResponse) String() string { return proto.CompactTextString(m) }
func (*PollResponse) ProtoMessage()    {}
func (*PollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_polling_c25380d06902f4da, []int{1}
}
func (m *PollResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollResponse.Unmarshal(m, b)
}
func (m *PollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollResponse.Marshal(b, m, deterministic)
}
func (dst *PollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollResponse.Merge(dst, src)
}
func (m *PollResponse) XXX_Size() int {
	return xxx_messageInfo_PollResponse.Size(m)
}
func (m *PollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollResponse proto.InternalMessageInfo

func (m *PollResponse) GetDistance() uint64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *PollResponse) GetClaimableTokens() uint64 {
	if m != nil {
		return m.ClaimableTokens
	}
	return 0
}

type RegisterRequest struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_polling_c25380d06902f4da, []int{2}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (dst *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(dst, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type RegisterResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_polling_c25380d06902f4da, []int{3}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (dst *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(dst, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*PollRequest)(nil), "polling.PollRequest")
	proto.RegisterType((*PollResponse)(nil), "polling.PollResponse")
	proto.RegisterType((*RegisterRequest)(nil), "polling.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "polling.RegisterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PollingServiceClient is the client API for PollingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PollingServiceClient interface {
	Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type pollingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPollingServiceClient(cc *grpc.ClientConn) PollingServiceClient {
	return &pollingServiceClient{cc}
}

func (c *pollingServiceClient) Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error) {
	out := new(PollResponse)
	err := c.cc.Invoke(ctx, "/polling.PollingService/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollingServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/polling.PollingService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollingServiceServer is the server API for PollingService service.
type PollingServiceServer interface {
	Poll(context.Context, *PollRequest) (*PollResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

func RegisterPollingServiceServer(s *grpc.Server, srv PollingServiceServer) {
	s.RegisterService(&_PollingService_serviceDesc, srv)
}

func _PollingService_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingServiceServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polling.PollingService/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingServiceServer).Poll(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollingService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollingServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polling.PollingService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollingServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PollingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "polling.PollingService",
	HandlerType: (*PollingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poll",
			Handler:    _PollingService_Poll_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PollingService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polling.proto",
}

func init() { proto.RegisterFile("polling.proto", fileDescriptor_polling_c25380d06902f4da) }

var fileDescriptor_polling_c25380d06902f4da = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xdd, 0x4a, 0xc4, 0x30,
	0x10, 0x85, 0xa9, 0x2e, 0x6e, 0x1d, 0x57, 0x77, 0x09, 0x0a, 0xb1, 0x57, 0x52, 0x04, 0x17, 0x84,
	0xbd, 0x70, 0x1f, 0x40, 0xf0, 0x09, 0x4a, 0xec, 0x95, 0x77, 0x69, 0x3b, 0x94, 0x60, 0x9a, 0xd4,
	0x4c, 0xea, 0x23, 0xf8, 0xdc, 0xd2, 0xf4, 0x47, 0x29, 0x82, 0x77, 0x39, 0x27, 0x1f, 0x33, 0x67,
	0x0e, 0x5c, 0xb6, 0x56, 0x6b, 0x65, 0xea, 0x43, 0xeb, 0xac, 0xb7, 0x6c, 0x3d, 0xca, 0xf4, 0x01,
	0x2e, 0x32, 0xab, 0xb5, 0xc0, 0x8f, 0x0e, 0xc9, 0x33, 0x0e, 0x6b, 0x59, 0x55, 0x0e, 0x89, 0x78,
	0x74, 0x17, 0xed, 0x37, 0x62, 0x92, 0x69, 0x0e, 0x9b, 0x01, 0xa4, 0xd6, 0x1a, 0x42, 0x96, 0x40,
	0x5c, 0x29, 0xf2, 0xd2, 0x94, 0x18, 0xd0, 0x95, 0x98, 0x35, 0xdb, 0xc3, 0xb6, 0xd4, 0x52, 0x35,
	0xb2, 0xd0, 0x98, 0xdb, 0x77, 0x34, 0xc4, 0x4f, 0x02, 0xb2, 0xb4, 0xd3, 0x47, 0xd8, 0x0a, 0xac,
	0x15, 0x79, 0x74, 0xff, 0x47, 0xb8, 0x87, 0xdd, 0x0f, 0x3c, 0xc6, 0xd8, 0xc1, 0x69, 0xe7, 0x74,
	0x20, 0xcf, 0x45, 0xff, 0x7c, 0xfa, 0x8a, 0xe0, 0x2a, 0x1b, 0xae, 0x7b, 0x45, 0xf7, 0xa9, 0x4a,
	0x64, 0x47, 0x58, 0xf5, 0x0e, 0xbb, 0x3e, 0x4c, 0x2d, 0xfc, 0xba, 0x39, 0xb9, 0x59, 0xb8, 0xe3,
	0xe4, 0x67, 0x88, 0xa7, 0x6d, 0x8c, 0xcf, 0xc8, 0x22, 0x6d, 0x72, 0xfb, 0xc7, 0xcf, 0x30, 0xe0,
	0x05, 0xde, 0xe2, 0x06, 0x89, 0x64, 0x8d, 0x54, 0x9c, 0x85, 0xda, 0x8f, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x6f, 0x19, 0xa0, 0xd4, 0x87, 0x01, 0x00, 0x00,
}
